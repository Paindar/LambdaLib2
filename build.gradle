buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'java'


version = "0.1.8"
group = "cn.lambdalib2" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LambdaLib2"
def mc_version = "1.12.2-14.23.5.2855"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

compileJava.options.encoding = "UTF-8"

minecraft {
    mappings channel: 'snapshot', version: '20180814-1.12'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'cn.lambdalib2.CorePlugin'
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.coreMods.load', 'cn.lambdalib2.CorePlugin'
        }
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    minecraft "net.minecraftforge:forge:${mc_version}"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

jar {
    manifest {
        attributes([
                "Specification-Title": "LambdaLib2",
                "Specification-Vendor": "Lambda Innovation/Paindar",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Lambda Innovation/Paindar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin": "cn.lambdalib2.CorePlugin",
                "FMLCorePluginContainsFMLMod": true
        ])
    }
}

processResources {
    // replace stuff in mcmod.info, nothing else

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
    }

}


task deobfJar(type: Jar) {
    classifier 'dev'
    from sourceSets.main.output
    manifest {
        attributes 'FMLCorePluginContainsFMLMod' : 'true'
        attributes 'FMLCorePlugin' : 'cn.lambdalib2.CorePlugin'
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "file:///$buildDir/libs"
        }
    }
}

